emoTrend <- describe(temoResultClean)
emoDHTrend <- emoTrend[c(1:1237),]
emoDMTrend <- emoTrend[c(1238:2354),]
emoDMTrend$vars <- seq(length=nrow(emoDMTrend))
dotWithErrorPlotSave(emoDMTrend, temoResultClean, "Emotional Arousal Rating for De Muur", "emoDM")
#CLEAN UP DELIMITED CSV FILE CONTAINING ALL RATED WORDS IN SURVEY
template <- read.csv(file = "forWordSeparation_cleaned.csv", header = F, sep = ",", stringsAsFactors = FALSE)
template <- t(template)
colnames(template) <- template[1, ]
template <- template[-1, ]
template <- as.data.frame(template) #data type converted to matrix after transpose, due to rectangular shape - force back into data frame for "gather"
template <- gather(template, "qnLabel", "word", 1:17)
template <- template[!(template$word == ""), ]
template <- template[ , c("word","qnLabel")]
template$qnLabel <- trimws(template$qnLabel)
template$qnLabel <- as.factor(template$qnLabel)
template$qnLabel <- factor(template$qnLabel, levels = c("3.1","5.1","7.1","9.1","11.1","13.1","15.1","17.1","19.1","24.1","26.1","28.1","30.1","32.1","34.1","36.1","38.1"))
qnLabel <- levels(template$qnLabel)
#-------------------------------------------------------
#MATCH EMO RESULTS
emoResult <- read.csv(file="Verhalen_Emotional+Arousal_October+1%2C+2019_13.27.csv",
header = TRUE, sep = ",", stringsAsFactors = FALSE)
emoResult <- emoResult[-c(1,2), ] #get rid of title row
emoResult <- emoResult[-c(1:9), ] #get rid of preview Test results
emoResult <- emoResult[-c(15:17,28), ] #get rid of incomplete results
totalParticipant <- nrow(emoResult)
totalWord <- nrow(template)
emoResultClean <- template
for (indexResponse in 1:totalParticipant) {
for (indexWord in 1:totalWord) {
searchWord <- template[indexWord,1]
searchQn <- template[indexWord,2]
resultCol <- indexResponse+2
emoResultClean[indexWord,resultCol] <- NA #initialize a new column
for (possibleRating in 1:7) {
if (!is.na(emoResultClean[indexWord,resultCol])) {
break
}
currentColName <- paste ("Q", searchQn, "_", possibleRating, sep = "", collapse = NULL)
if (grepl(searchWord, emoResult[indexResponse,currentColName], fixed = TRUE)) {
emoResultClean[indexWord,resultCol] <- substr(currentColName, nchar(currentColName), nchar(currentColName))
}
else {
if ((possibleRating == 7) & (is.na(emoResultClean[indexWord,resultCol]))) {
emoResultClean[indexWord,resultCol] <- NA
}
}
}
}
}
#-------------------------------------------------------
#MATCH LIT RESULTS
litResult <- read.csv(file="Verhalen_Literariness_October+1%2C+2019_13.28.csv",
header = TRUE, sep = ",", stringsAsFactors = FALSE)
litResult <- litResult[-c(1,2), ] #get rid of title row
litResult <- litResult[-c(1:10), ] #get rid of preview Test results
totalParticipant <- nrow(litResult)
totalWord <- nrow(template)
litResultClean <- template
for (indexResponse in 1:totalParticipant) {
for (indexWord in 1:totalWord) {
searchWord <- template[indexWord,1]
searchQn <- template[indexWord,2]
resultCol <- indexResponse+2
litResultClean[indexWord,resultCol] <- NA #initialize a new column
for (possibleRating in 1:2) {
if (!is.na(litResultClean[indexWord,resultCol])) {
break
}
currentColName <- paste ("Q", searchQn, "_", possibleRating, sep = "", collapse = NULL)
if (grepl(searchWord, litResult[indexResponse,currentColName], fixed = TRUE)) {
litResultClean[indexWord,resultCol] <- substr(currentColName, nchar(currentColName), nchar(currentColName))
}
else {
if ((possibleRating == 2) & (is.na(litResultClean[indexWord,resultCol]))) {
litResultClean[indexWord,resultCol] <- NA
}
}
}
}
}
#-------------------------------------------------------
saveRDS(emoResultClean, file = "emoResultClean.rds")
saveRDS(litResultClean, file = "litResultClean.rds")
saveRDS(template, file = "template.rds")
#Visualize ratings
library(ggplot2)
library(psych)
dotWithErrorPlotSave <- function(trend, tResultClean, plotTitle, shortTitle) {
dodge <- position_dodge(width = 0.9)
limits <- aes(ymax = trend$mean + trend$se,
ymin = trend$mean - trend$se)
p <- ggplot(data = trend, aes(x = vars, y = mean, color = vars)) +
geom_point(size=2.5, alpha=0.6, color = "orange") +
geom_errorbar(limits, position = dodge, width = 0.25) +
ylim(1,7) +
theme(axis.text.x=element_blank(), axis.ticks.x=element_blank(),
axis.title.x=element_blank()) +
ggtitle(paste(plotTitle, ", N=", nrow(tResultClean), sep=""))
ggsave(paste("~/Desktop/", shortTitle,".png", sep = ""), plot = last_plot(), device = png(),
scale = 1, width = 300, height = 200, units = c("mm"),
dpi = 300, limitsize = TRUE)
return(p)
}
#EMO
temoResultClean <- t(emoResultClean)
temoResultClean <- temoResultClean[-c(1:2),]
emoTrend <- describe(temoResultClean)
emoDHTrend <- emoTrend[c(1:1237),]
emoDMTrend <- emoTrend[c(1238:2354),]
emoDMTrend$vars <- seq(length=nrow(emoDMTrend))
dotWithErrorPlotSave(emoDMTrend, temoResultClean, "Emotional Arousal Rating for De Muur", "emoDM")
knitr::opts_chunk$set(echo = TRUE)
library(tidyr)
#CLEAN UP DELIMITED CSV FILE CONTAINING ALL RATED WORDS IN SURVEY
template <- read.csv(file = "forWordSeparation_cleaned.csv", header = F, sep = ",", stringsAsFactors = FALSE)
template <- t(template)
colnames(template) <- template[1, ]
template <- template[-1, ]
template <- as.data.frame(template) #data type converted to matrix after transpose, due to rectangular shape - force back into data frame for "gather"
template <- gather(template, "qnLabel", "word", 1:17)
template <- template[!(template$word == ""), ]
template <- template[ , c("word","qnLabel")]
template$qnLabel <- trimws(template$qnLabel)
template$qnLabel <- as.factor(template$qnLabel)
template$qnLabel <- factor(template$qnLabel, levels = c("3.1","5.1","7.1","9.1","11.1","13.1","15.1","17.1","19.1","24.1","26.1","28.1","30.1","32.1","34.1","36.1","38.1"))
qnLabel <- levels(template$qnLabel)
#-------------------------------------------------------
#MATCH EMO RESULTS
emoResult <- read.csv(file="Verhalen_Emotional+Arousal_October+1%2C+2019_13.27.csv",
header = TRUE, sep = ",", stringsAsFactors = FALSE)
emoResult <- emoResult[-c(1,2), ] #get rid of title row
emoResult <- emoResult[-c(1:9), ] #get rid of preview Test results
emoResult <- emoResult[-c(15:17,28), ] #get rid of incomplete results
totalParticipant <- nrow(emoResult)
totalWord <- nrow(template)
emoResultClean <- template
for (indexResponse in 1:totalParticipant) {
for (indexWord in 1:totalWord) {
searchWord <- template[indexWord,1]
searchQn <- template[indexWord,2]
resultCol <- indexResponse+2
emoResultClean[indexWord,resultCol] <- NA #initialize a new column
for (possibleRating in 1:7) {
if (!is.na(emoResultClean[indexWord,resultCol])) {
break
}
currentColName <- paste ("Q", searchQn, "_", possibleRating, sep = "", collapse = NULL)
if (grepl(searchWord, emoResult[indexResponse,currentColName], fixed = TRUE)) {
emoResultClean[indexWord,resultCol] <- substr(currentColName, nchar(currentColName), nchar(currentColName))
}
else {
if ((possibleRating == 7) & (is.na(emoResultClean[indexWord,resultCol]))) {
emoResultClean[indexWord,resultCol] <- NA
}
}
}
}
}
#-------------------------------------------------------
#MATCH LIT RESULTS
litResult <- read.csv(file="Verhalen_Literariness_October+1%2C+2019_13.28.csv",
header = TRUE, sep = ",", stringsAsFactors = FALSE)
litResult <- litResult[-c(1,2), ] #get rid of title row
litResult <- litResult[-c(1:10), ] #get rid of preview Test results
totalParticipant <- nrow(litResult)
totalWord <- nrow(template)
litResultClean <- template
for (indexResponse in 1:totalParticipant) {
for (indexWord in 1:totalWord) {
searchWord <- template[indexWord,1]
searchQn <- template[indexWord,2]
resultCol <- indexResponse+2
litResultClean[indexWord,resultCol] <- NA #initialize a new column
for (possibleRating in 1:2) {
if (!is.na(litResultClean[indexWord,resultCol])) {
break
}
currentColName <- paste ("Q", searchQn, "_", possibleRating, sep = "", collapse = NULL)
if (grepl(searchWord, litResult[indexResponse,currentColName], fixed = TRUE)) {
litResultClean[indexWord,resultCol] <- substr(currentColName, nchar(currentColName), nchar(currentColName))
}
else {
if ((possibleRating == 2) & (is.na(litResultClean[indexWord,resultCol]))) {
litResultClean[indexWord,resultCol] <- NA
}
}
}
}
}
#-------------------------------------------------------
saveRDS(emoResultClean, file = "emoResultClean.rds")
saveRDS(litResultClean, file = "litResultClean.rds")
saveRDS(template, file = "template.rds")
#Visualize ratings
library(ggplot2)
library(psych)
dotWithErrorPlotSave <- function(trend, tResultClean, plotTitle, shortTitle) {
dodge <- position_dodge(width = 0.9)
limits <- aes(ymax = trend$mean + trend$se,
ymin = trend$mean - trend$se)
ggplot(data = trend, aes(x = vars, y = mean, color = vars)) +
geom_point(size=2.5, alpha=0.6, color = "orange") +
geom_errorbar(limits, position = dodge, width = 0.25) +
xlab("Word #") +
theme(text = element_text(size=20), axis.text.x=element_blank(), axis.ticks.x=element_blank()) +
ggtitle(paste(plotTitle, ", N=", nrow(tResultClean), sep=""))
ggsave(paste("~/Desktop/", shortTitle,".png", sep = ""), plot = last_plot(), device = png(),
scale = 1, width = 300, height = 200, units = c("mm"),
dpi = 300, limitsize = TRUE)
}
#EMO
temoResultClean <- t(emoResultClean)
temoResultClean <- temoResultClean[-c(1:2),]
emoTrend <- describe(temoResultClean)
emoDHTrend <- emoTrend[c(1:1237),]
emoDMTrend <- emoTrend[c(1238:2354),]
emoDMTrend$vars <- seq(length=nrow(emoDMTrend))
dotWithErrorPlotSave(emoDMTrend, temoResultClean, "Emotional Arousal Rating for De Muur", "emoDM")
dotWithErrorPlotSave(emoDHTrend, temoResultClean, "Emotional Arousal Rating for De Mexicaanse Hond", "emoDH")
#LIT
tlitResultClean <- t(litResultClean)
tlitResultClean <- tlitResultClean[-c(1:2),]
litTrend <- describe(tlitResultClean)
litDHTrend <- litTrend[c(1:1237),]
litDMTrend <- litTrend[c(1238:2354),]
litDMTrend$vars <- seq(length=nrow(litDMTrend))
dotWithErrorPlotSave(litDMTrend, tlitResultClean, "Literariness Rating for De Muur", "litDM")
dotWithErrorPlotSave(litDHTrend, tlitResultClean, "Literariness Rating for De Mexicaanse Hond", "litDH")
#SIMPLE LINEAR REGRESSION ANOVA OF EMO ON LIT, BOXCAR SMOOTHED
library('zoo')
emoDHTrend <- cbind(emoDHTrend, rollmean(emoDHTrend$mean, k = 5, fill = NA, align = "center"))
names(emoDHTrend)[14] <- "rollmean"
litDHTrend <- cbind(litDHTrend, rollmean(litDHTrend$mean, k = 5, fill = NA, align = "center"))
names(litDHTrend)[14] <- "rollmean"
emo_lit_DHmodel <- lm(emoDHTrend$mean ~ litDHTrend$mean)
emo_lit_DHboxedmodel <- lm(emoDHTrend$rollmean ~ litDHTrend$rollmean)
anova(emo_lit_DHmodel)
anova(emo_lit_DHboxedmodel)
emoDMTrend <- cbind(emoDMTrend, rollmean(emoDMTrend$mean, k = 5, fill = NA, align = "center"))
names(emoDMTrend)[14] <- "rollmean"
litDMTrend <- cbind(litDMTrend, rollmean(litDMTrend$mean, k = 5, fill = NA, align = "center"))
names(litDMTrend)[14] <- "rollmean"
emo_lit_DMmodel <- lm(emoDMTrend$mean ~ litDMTrend$mean)
emo_lit_DMboxedmodel <- lm(emoDMTrend$rollmean ~ litDMTrend$rollmean)
anova(emo_lit_DMmodel)
anova(emo_lit_DMboxedmodel)
cor.test(emoDHTrend$mean, litDHTrend$mean)
cor.test(emoDMTrend$mean, litDMTrend$mean)
cor.test(emoDMTrend$rollmean, litDMTrend$rollmean)
cor.test(emoDMTrend$mean, litDMTrend$mean)
cor.test(emoDHTrend$mean, litDHTrend$mean)
cor.test(emoDMTrend$mean, litDMTrend$mean)
cor.test(emoDHTrend$mean, litDHTrend$mean, method = "pearson")
cor.test(emoDHTrend$mean, litDHTrend$mean, method = "pearson")
cor.test(emoDMTrend$mean, litDMTrend$mean, method = "pearson")
knitr::opts_chunk$set(echo = TRUE)
library(tidyr)
#CLEAN UP DELIMITED CSV FILE CONTAINING ALL RATED WORDS IN SURVEY
template <- read.csv(file = "forWordSeparation_cleaned.csv", header = F, sep = ",", stringsAsFactors = FALSE)
template <- t(template)
colnames(template) <- template[1, ]
template <- template[-1, ]
template <- as.data.frame(template) #data type converted to matrix after transpose, due to rectangular shape - force back into data frame for "gather"
template <- gather(template, "qnLabel", "word", 1:17)
template <- template[!(template$word == ""), ]
template <- template[ , c("word","qnLabel")]
template$qnLabel <- trimws(template$qnLabel)
template$qnLabel <- as.factor(template$qnLabel)
template$qnLabel <- factor(template$qnLabel, levels = c("3.1","5.1","7.1","9.1","11.1","13.1","15.1","17.1","19.1","24.1","26.1","28.1","30.1","32.1","34.1","36.1","38.1"))
qnLabel <- levels(template$qnLabel)
#-------------------------------------------------------
#MATCH EMO RESULTS
emoResult <- read.csv(file="Verhalen_Emotional+Arousal_October+1%2C+2019_13.27.csv",
header = TRUE, sep = ",", stringsAsFactors = FALSE)
emoResult <- emoResult[-c(1,2), ] #get rid of title row
emoResult <- emoResult[-c(1:9), ] #get rid of preview Test results
emoResult <- emoResult[-c(15:17,28), ] #get rid of incomplete results
totalParticipant <- nrow(emoResult)
totalWord <- nrow(template)
emoResultClean <- template
for (indexResponse in 1:totalParticipant) {
for (indexWord in 1:totalWord) {
searchWord <- template[indexWord,1]
searchQn <- template[indexWord,2]
resultCol <- indexResponse+2
emoResultClean[indexWord,resultCol] <- NA #initialize a new column
for (possibleRating in 1:7) {
if (!is.na(emoResultClean[indexWord,resultCol])) {
break
}
currentColName <- paste ("Q", searchQn, "_", possibleRating, sep = "", collapse = NULL)
if (grepl(searchWord, emoResult[indexResponse,currentColName], fixed = TRUE)) {
emoResultClean[indexWord,resultCol] <- substr(currentColName, nchar(currentColName), nchar(currentColName))
}
else {
if ((possibleRating == 7) & (is.na(emoResultClean[indexWord,resultCol]))) {
emoResultClean[indexWord,resultCol] <- NA
}
}
}
}
}
#-------------------------------------------------------
#MATCH LIT RESULTS
litResult <- read.csv(file="Verhalen_Literariness_October+1%2C+2019_13.28.csv",
header = TRUE, sep = ",", stringsAsFactors = FALSE)
litResult <- litResult[-c(1,2), ] #get rid of title row
litResult <- litResult[-c(1:10), ] #get rid of preview Test results
totalParticipant <- nrow(litResult)
totalWord <- nrow(template)
litResultClean <- template
for (indexResponse in 1:totalParticipant) {
for (indexWord in 1:totalWord) {
searchWord <- template[indexWord,1]
searchQn <- template[indexWord,2]
resultCol <- indexResponse+2
litResultClean[indexWord,resultCol] <- NA #initialize a new column
for (possibleRating in 1:2) {
if (!is.na(litResultClean[indexWord,resultCol])) {
break
}
currentColName <- paste ("Q", searchQn, "_", possibleRating, sep = "", collapse = NULL)
if (grepl(searchWord, litResult[indexResponse,currentColName], fixed = TRUE)) {
litResultClean[indexWord,resultCol] <- substr(currentColName, nchar(currentColName), nchar(currentColName))
}
else {
if ((possibleRating == 2) & (is.na(litResultClean[indexWord,resultCol]))) {
litResultClean[indexWord,resultCol] <- NA
}
}
}
}
}
#-------------------------------------------------------
saveRDS(emoResultClean, file = "emoResultClean.rds")
saveRDS(litResultClean, file = "litResultClean.rds")
saveRDS(template, file = "template.rds")
View(emoDM)
View(emoDM)
View(emoDHTrend)
View(litResultClean)
View(emoResultClean)
library(psych)
icc
help icc
?ICC
ICC(litResultClean[,3:29], missing = TRUE, alpha = 0.05)
ICC(litResultClean[,3:29], missing = TRUE, alpha = 0.05, lmer = FALSE)
install.packages('lme4')
library(lme4)
ICC(emoResultClean[,3:29], missing = TRUE, alpha = 0.05, lmer = TRUE)
library(r_lme4)
library(lme)
.libPaths()
library(lme4)
install.packages('lme4')
library(lme4)
library(lme4)
knitr::opts_chunk$set(echo = TRUE)
#READ IN ALL 4 ADJUSTED PRAAT WORD ONSETS AND DURATIONS
colLabel <- c("Word", "Onset", "Duration")
DHO <- read.delim("thesis/De Hond_O_adjusted.csv", header = FALSE, sep = ",", stringsAsFactors = FALSE)
DHO <- DHO[-c(1:3), ] #get rid of title
colnames(DHO) <- colLabel
DMO <- read.delim("thesis/De Muur_O_adjusted.csv", header = FALSE, sep = ",", stringsAsFactors = FALSE)
DMO <- DMO[-c(1,2), ] #get rid of title
colnames(DMO) <- colLabel
DH2V <- read.delim("thesis/De Hond_2V_adjusted.csv", header = FALSE, sep = ",", stringsAsFactors = FALSE)
DH2V <- DH2V[-c(1:3), ] #get rid of title
colnames(DH2V) <- colLabel
DM2V <- read.delim("thesis/De Muur_2V_adjusted.csv", header = FALSE, sep = ",", stringsAsFactors = FALSE)
DM2V <- DM2V[-c(1,2), ] #get rid of title
colnames(DM2V) <- colLabel
#--------------------------------------------------
#MATCH, FOR ORIGINAL(FIRST PERSON PERSPEC), THE TIMING WITH RATED WORDS
#SETUP
emoResultClean <- readRDS("emoResultClean.rds")
litResultClean <- readRDS("litResultClean.rds")
colNumEmo <- ncol(emoResultClean)
colNumLit <- ncol(litResultClean)
emoOGwTiming <- emoResultClean
emo2VwTiming <- emoResultClean
litOGwTiming <- litResultClean
lit2VwTiming <- litResultClean
addTimingCols <- function(totalWord, praatClean, resultClean, resultwTiming, colNum) {
if (totalWord == 1237) {
for (index in 1:totalWord) {
if (grepl(praatClean[index,1], resultClean[index,1], fixed = TRUE)) {
resultwTiming[index, c(colNum+1, colNum+2)] <- praatClean[index, c(2,3)]
}
else {
resultwTiming[index, c(colNum+1, colNum+2)] <- c("mismatch", "mismatch")
}
}
}
else {
for (index in 1:totalWord) {
if (grepl(praatClean[index,1], resultClean[index + 1237,1], fixed = TRUE)) {
resultwTiming[index + 1237, c(colNum+1, colNum+2)] <- praatClean[index, c(2,3)]
}
else {
resultwTiming[index + 1237, c(colNum+1, colNum+2)] <- c("mismatch", "mismatch")
}
}
}
return(resultwTiming)
}
emoOGwTiming <- addTimingCols(1237, DHO, emoResultClean, emoOGwTiming, colNumEmo)
emoOGwTiming <- addTimingCols(1117, DMO, emoResultClean, emoOGwTiming, colNumEmo)
litOGwTiming <- addTimingCols(1237, DHO, litResultClean, litOGwTiming, colNumLit)
litOGwTiming <- addTimingCols(1117, DMO, litResultClean, litOGwTiming, colNumLit)
emo2VwTiming <- addTimingCols(1237, DH2V, emoResultClean, emo2VwTiming, colNumEmo)
emo2VwTiming <- addTimingCols(1117, DM2V, emoResultClean, emo2VwTiming, colNumEmo)
lit2VwTiming <- addTimingCols(1237, DH2V, litResultClean, lit2VwTiming, colNumLit)
lit2VwTiming <- addTimingCols(1117, DM2V, litResultClean, lit2VwTiming, colNumLit)
stderr <- function(x) {
sd(x, na.rm = TRUE)/sqrt(length(x[!is.na(x)]))
}
addMNSECol <- function(resultwTiming, colNum) {
for (colIndex in 3: colNum) {
resultwTiming[, colIndex] <- as.numeric(resultwTiming[, colIndex])
}
resultwTiming <- transform(resultwTiming, MN = rowMeans(resultwTiming[ ,3:colNum], na.rm = TRUE))
rowNum <- nrow(resultwTiming)
for (rowIndex in 1:rowNum) {
resultwTiming[rowIndex, colNum+4] <- stderr(resultwTiming[rowIndex, 3:colNum])
}
names(resultwTiming)[colNum+4] <- 'SE'
return(resultwTiming)
}
emoOGwTiming <- addMNSECol(emoOGwTiming, colNumEmo)
emo2VwTiming <- addMNSECol(emo2VwTiming, colNumEmo)
litOGwTiming <- addMNSECol(litOGwTiming, colNumLit)
lit2VwTiming <- addMNSECol(lit2VwTiming, colNumLit)
#WRITE OUTPUT FILES
emoDHOFinal <- matrix(data = NA, nrow = 0, ncol = colNumEmo+4)
emoDMOFinal <- matrix(data = NA, nrow = 0, ncol = colNumEmo+4)
emoDH2VFinal <- matrix(data = NA, nrow = 0, ncol = colNumEmo+4)
emoDM2VFinal <- matrix(data = NA, nrow = 0, ncol = colNumEmo+4)
litDHOFinal <- matrix(data = NA, nrow = 0, ncol = colNumLit+4)
litDMOFinal <- matrix(data = NA, nrow = 0, ncol = colNumLit+4)
litDH2VFinal <- matrix(data = NA, nrow = 0, ncol = colNumLit+4)
litDM2VFinal <- matrix(data = NA, nrow = 0, ncol = colNumLit+4)
cleanOutput <- function(totalWord, colNum, rawData, outputFile, outputName) {
if (totalWord == 1237) {
for (index in 1:totalWord) {
if ((rawData[index, colNum+2] == "mismatch") | (rawData[index, colNum+2] == "0")) {
next
}
else {
outputFile <- rbind(outputFile, rawData[index, ])
}
}
}
else {
for (index in 1:totalWord) {
if ((rawData[index+1237, colNum+2] == "mismatch") | (rawData[index+1237, colNum+2] == "0")) {
next
}
else {
outputFile <- rbind(outputFile, rawData[index+1237, ])
}
}
}
#str(outputFile)
write.csv(outputFile, file = paste("thesis/", outputName, ".csv", sep=""))
return(outputFile)
}
#This function cleans mismatched entries and write CSV output files.
emoDHOFinal <- cleanOutput(1237, colNumEmo, emoOGwTiming, emoDHOFinal, "emoDHOFinal")
emoDMOFinal <- cleanOutput(1117, colNumEmo, emoOGwTiming, emoDMOFinal, "emoDMOFinal")
emoDH2VFinal <- cleanOutput(1237, colNumEmo, emo2VwTiming, emoDH2VFinal, "emoDH2VFinal")
emoDM2VFinal <- cleanOutput(1117, colNumEmo, emo2VwTiming, emoDM2VFinal, "emoDM2VFinal")
litDHOFinal <- cleanOutput(1237, colNumLit, litOGwTiming, litDHOFinal, "litDHOFinal")
litDMOFinal <- cleanOutput(1117, colNumLit, litOGwTiming, litDMOFinal, "litDMOFinal")
litDH2VFinal <- cleanOutput(1237, colNumLit, lit2VwTiming, litDH2VFinal, "litDH2VFinal")
litDM2VFinal <- cleanOutput(1117, colNumLit, lit2VwTiming, litDM2VFinal, "litDM2VFinal")
#--------------------------------------------------
install.packages("knitr")
install.packages(c("ggplot2", "knitr", "lme4", "psych", "tidyr", "zoo"))
knitr::opts_chunk$set(echo = TRUE)
library(tidyr)
#Intraclass correlation
library(lme4)
emoResultCleanICC <- matrix(data = NA, nrow = 0, ncol = 27)
for (index in 1:2354) {
emoResultCleanICC <- rbind(emoResultCleanICC, emoResultClean[index, 3:29])
}
for (j in 1:27) {
emoResultCleanICC[,j] <- as.numeric(emoResultCleanICC[,j])
}
ICC(emoResultCleanICC, missing = FALSE, alpha = 0.05)
library(psych)
#Intraclass correlation
library(lme4)
emoResultCleanICC <- matrix(data = NA, nrow = 0, ncol = 27)
for (index in 1:2354) {
emoResultCleanICC <- rbind(emoResultCleanICC, emoResultClean[index, 3:29])
}
for (j in 1:27) {
emoResultCleanICC[,j] <- as.numeric(emoResultCleanICC[,j])
}
ICC(emoResultCleanICC, missing = FALSE, alpha = 0.05)
litResultCleanICC <- matrix(data = NA, nrow = 0, ncol = 27)
for (index in 1:2354) {
litResultCleanICC <- rbind(litResultCleanICC, litResultClean[index, 3:29])
}
for (j in 1:27) {
litResultCleanICC[,j] <- as.numeric(litResultCleanICC[,j])
}
ICC(litResultCleanICC, missing = FALSE, alpha = 0.05)
