-0.519230769,
-0.269230769,
-0.519230769,
-0.769230769,
-0.019230769,
-0.519230769,
-0.269230769,
-1.019230769,
0.480769231,
-0.019230769,
1.730769231)
str(PC3)
show PC3
open PC3
view(PC3)
view
PC3
SNPMNegDM <- c(-0.225200463,
-0.065265751,
-0.173616668,
-0.263443669,
-0.348073642,
-0.125972608,
-0.248613138,
-0.008390612,
-0.077568286,
-0.242638581,
0.125937498,
-0.130011999,
0.087740952,
-0.069029918,
-0.099718062,
-0.143582965,
0.117775728,
-0.043164919,
-0.236061026,
-0.19389681,
-0.107666759,
0.102804444,
-0.148224875,
-0.017727217,
0.093326513,
-0.192018658,
-0.375153072,
-0.077584909,
-0.017307436,
-0.080393865,
-0.313224207,
-0.236967437,
0.069815212,
-0.069934232,
-0.117682966,
-0.202439148,
0.003436423,
-0.274149549,
-0.001248047,
-0.158207875,
0.00459011,
-0.335707952,
-0.243586234,
-0.072834835,
-0.406956668,
0.08129972,
-0.07795746,
-0.087935271,
-0.23083058,
-0.075110545,
-0.015044004,
-0.168329976)
lmset <- data.frame(PC3,SNPMNegDM)
lmsetsum <- lm(lmset$PC3, lmset$SNPMNegDM)
help lm
lm
lmsetsum <- lm(SNPMNegDM~PC3)
summary(lmsetsum)
library(readxl)
Lit512DMmars <- read_excel("~/Desktop/Book1.xlsx")
lm(Lit512DMmars$snpmpostotal~Lit512DMmars$PC1)
lmsetsum <- lm(Lit512DMmars$snpmpostotal~Lit512DMmars$PC1)
lmsetsum
summary(lmsetsum)
library(readxl)
Book1 <- read_excel("~/Desktop/Book1.xlsx")
View(Book1)
pc3negsum <- lm(Book1$snpmnegtotal ~ Book1$PC3)
summary(pc3negsum)
summary(lmsetsum)
summary(pc3negsum)
summary(lmsetsum)
library(readxl)
DM_marsbar <- read_excel("~/Desktop/DM_marsbar.xlsx",
col_types = c("numeric", "numeric", "numeric",
"skip", "skip", "numeric", "numeric"))
View(DM_marsbar)
DMLitSnPMNegsum <- lm(DM_marsbar$Litbothsnpmneg ~ DM_marsbar$pc_lit)
summary(DMLitSnPMNegsum)
library(readxl)
DM_marsbar <- read_excel("~/Desktop/DM_marsbar.xlsx")
View(DM_marsbar)
DMEmoSnPMPossum <- lm(DM_marsbar$Emobothsnpmpos ~ DM_marsbar$pc_emo)
DMEmoSnPMNegsum <- lm(DM_marsbar$Emobothsnpmneg ~ DM_marsbar$pc_emo)
DMLitSnPMPossum <- lm(DM_marsbar$Litbothsnpmpos ~ DM_marsbar$pc_lit)
DMLitSnPMNegsum <- lm(DM_marsbar$Litbothsnpmneg ~ DM_marsbar$pc_lit)
summary(DMEmoSnPMPossum)
summary(DMEmoSnPMNegsum)
summary(DMLitSnPMPossum)
summary(DMLitSnPMNegsum)
save.image("~/Documents/GitHub/RStudio/Marsbartest_wkspace.RData")
library(readxl)
IntensityandEmotionReg <- read_excel("~/Desktop/IntensityandEmotionReg.xlsx")
View(IntensityandEmotionReg)
lm(IntensityandEmotionReg$intensity~IntensityandEmotionReg$DH_emo)
lmDMemo <- lm(IntensityandEmotionReg$intensity~IntensityandEmotionReg$DM_emo)
lmDHemo <- lm(IntensityandEmotionReg$intensity~IntensityandEmotionReg$DH_emo)
summary(lmDHemo)
lmDMemo <- lm(IntensityandEmotionReg$intensity~IntensityandEmotionReg$DM_emo)
summary(lmDMemo)
lmDM_DHemo <- lm(IntensityandEmotionReg$DM_emo~IntensityandEmotionReg$DH_emo)
summary(lmDM_DHemo)
knitr::opts_chunk$set(echo = TRUE)
library(readxl)
ROI_analysis <- read_excel("~/Desktop/ROI_analysis.xlsx")
View(ROI_analysis)
help lm
lm help
lm ?
lm
lmIPL <- lm(roi_LitPos_IPL ~ roi_LitPos_Precu, data = ROI_analysis)
summary(lmIPL)
lmIPL_FPCN <- lm(roi_LitPos_IPL ~ roi_EmoNeg, data = ROI_analysis)
summary(lmIPL_FPCN)
lmIPL_pc1 <- lm(roi_LitPos_IPL ~ pc1_wellwritten, data = ROI_analysis)
summary(lmIPL_pc1)
lmIPL_pc2 <- lm(roi_LitPos_IPL ~ pc2_accessible, data = ROI_analysis)
summary(lmIPL_pc2)
lmIPL_pc3 <- lm(roi_LitPos_IPL ~ pc3_interesting, data = ROI_analysis)
summary(lmIPL_pc3)
lmIPL_IFG <- lm(roi_LitPos_IPL ~ roi_LitPos_IFG, data = ROI_analysis)
summary(lmIPL_IFG)
library(readxl)
ROI_analysis <- read_excel("~/Desktop/ROI_analysis.xlsx")
lmIFG_beh <- lm(roi_LitPos_IFG ~ interesting + wellwritten + of_high_literary_quality +
easy_to_understand + accessible + thrilling + beautiful + fascinating +
emotional + sad, data = ROI_analysis)
summary(lmIFG_beh)
lmFPCN_beh <- lm(roi_EmoNeg ~ interesting + wellwritten + of_high_literary_quality +
easy_to_understand + accessible + thrilling + beautiful + fascinating +
emotional + sad, data = ROI_analysis)
summary(lmFPCN_beh)
lmIPL_Precu <- lm(roi_LitPos_IPL ~ roi_LitPos_Precu + roi_LitPos_IFG, data = ROI_analysis)
summary(lmIPL_Precu)
lmIPL_Precu <- lm(roi_LitPos_IPL ~ roi_EmoNeg, data = ROI_analysis)
summary(lmIPL_Precu)
lmIFG_beh <- lm(roi_LitPos_IFG ~ interesting + wellwritten + of_high_literary_quality +
easy_to_understand + accessible + thrilling + beautiful + fascinating +
emotional + sad + Story + fMRI_subj, data = ROI_analysis)
summary(lmIFG_beh)
library(lme4)
lmer
lmIFG_beh <- lmer(roi_LitPos_IFG ~ interesting + wellwritten + of_high_literary_quality +
easy_to_understand + accessible + thrilling + beautiful + fascinating +
emotional + sad + (1|Story) + (1|fMRI_subj), data = ROI_analysis)
summary(lmIFG_beh)
lmIFG_beh <- lmer(roi_LitPos_IFG ~ interesting + wellwritten + of_high_literary_quality +
easy_to_understand + accessible + thrilling + beautiful + fascinating +
emotional + sad + (1|Story) + (1|fMRI_subj), data = ROI_analysis)
summary(lmIFG_beh)
lmFPCN_beh <- lm(roi_EmoNeg ~ interesting + wellwritten + of_high_literary_quality +
easy_to_understand + accessible + thrilling + beautiful + fascinating +
emotional + sad, data = ROI_analysis)
summary(lmFPCN_beh)
lmIPL_beh <- lmer(roi_LitPos_IPL ~ interesting + wellwritten + of_high_literary_quality +
easy_to_understand + accessible + thrilling + beautiful + fascinating +
emotional + sad + (1|Story) + (1|fMRI_subj), data = ROI_analysis)
summary(lmIPL_beh)
lmPrecu_beh <- lmer(roi_LitPos_Precu ~ interesting + wellwritten + of_high_literary_quality +
easy_to_understand + accessible + thrilling + beautiful + fascinating +
emotional + sad + (1|Story) + (1|fMRI_subj), data = ROI_analysis)
summary(lmPrecu_beh)
lmSTG_beh <- lmer(roi_LitNeg ~ interesting + wellwritten + of_high_literary_quality +
easy_to_understand + accessible + thrilling + beautiful + fascinating +
emotional + sad + (1|Story) + (1|fMRI_subj), data = ROI_analysis)
summary(lmSTG_beh)
library(ggplot2)
library(GGally)
install.packages('GGally')
library(GGally)
ggpairs(data = ROI_analysis[, c('roi_LitPos_IFG', 'roi_LitPos_IPL', 'roi_LitPos_IPL')])
ggpairs(data = ROI_analysis[, c("roi_LitPos_IFG", "roi_LitPos_IPL", "roi_LitPos_IPL")])
ggpairs(data = ROI_analysis[, c("roi_LitPos_IFG", "roi_LitPos_IPL", "roi_LitPos_Precu")])
ggpairs(data = ROI_analysis[, c("roi_LitPos_IFG", "roi_LitPos_IPL", "roi_LitPos_Precu",
"roi_LitNeg" , "roi_EmoNeg")])
ggpairs(data = ROI_analysis[, c("interesting", "wellwritten", "of_high_literary_quality",
"easy_to_understand", "accessible", "thrilling", "beautiful",
"fascinating", "emotional", "sad")])
lmIFG_
lmIFG_beh
View(lmIPL_IFG)
View(lmIFG_beh)
plot(lmIPL_beh)
knitr::opts_chunk$set(echo = TRUE)
library(readxl)
ROI_analysis <- read_excel("~/Desktop/ROI_analysis.xlsx")
library(lme4)
library(ggplot2)
library(GGally)
ggpairs(data = ROI_analysis[, c("care_about_style", "like_fiction", "num_novels_lastyr", "often_read",
"IRI_fantasy", "need_for_cognition", "need_for_affect", "author_recog",
"EQ")])
lmIPL_questionnaires <- lmer(roi_LitPos_IPL ~ care_about_style + like_fiction + num_novels_lastyr +
often_read + IRI_fantasy + need_for_cognition + need_for_affect +
author_recog + EQ + (1|Story) + (1|fMRI_subj), data = ROI_analysis)
summary(lmIPL_questionnaires)
lmIFG_qnns <- lmer(roi_LitPos_IFG ~ care_about_style + like_fiction + num_novels_lastyr +
often_read + IRI_fantasy + need_for_cognition + need_for_affect +
author_recog + EQ + (1|Story) + (1|fMRI_subj), data = ROI_analysis)
summary(lmIFG_qnns)
lmPrecu_qnns <- lmer(roi_LitPos_Precu ~ care_about_style + like_fiction + num_novels_lastyr +
often_read + IRI_fantasy + need_for_cognition + need_for_affect +
author_recog + EQ + (1|Story) + (1|fMRI_subj), data = ROI_analysis)
summary(lmPrecu_qnns)
lmSTG_qnns <- lmer(roi_LitNeg ~ care_about_style + like_fiction + num_novels_lastyr +
often_read + IRI_fantasy + need_for_cognition + need_for_affect +
author_recog + EQ + (1|Story) + (1|fMRI_subj), data = ROI_analysis)
summary(lmSTG_qnns)
lmFPCN_qnns <- lmer(roi_EmoNeg ~ care_about_style + like_fiction + num_novels_lastyr +
often_read + IRI_fantasy + need_for_cognition + need_for_affect +
author_recog + EQ + (1|Story) + (1|fMRI_subj), data = ROI_analysis)
summary(lmFPCN_qnns)
knitr::opts_chunk$set(echo = TRUE)
lmIFG_3pc <- lmer(roi_LitPos_IFG ~ pc1_wellwritten + pc2_interesting + pc3_accessible + (1|Story)
+ (1|fMRI_subj), data = ROI_analysis)
library(readxl)
ROI_analysis <- read_excel("~/Desktop/ROI_analysis.xlsx")
library(lme4)
library(ggplot2)
library(GGally)
lmIFG_3pc <- lmer(roi_LitPos_IFG ~ pc1_wellwritten + pc2_interesting + pc3_accessible + (1|Story)
+ (1|fMRI_subj), data = ROI_analysis)
lmIFG_3pc <- lmer(roi_LitPos_IFG ~ pc1_wellwritten + pc2_accessible + pc3_interesting + (1|Story)
+ (1|fMRI_subj), data = ROI_analysis)
summary(lmIFG_3pc)
lmIFG_3pc <- lmer(roi_LitPos_IFG ~ pc1_wellwritten + pc2_accessible + pc3_interesting + (1|Story)
+ (1|fMRI_subj), data = ROI_analysis)
summary(lmIFG_3pc)
lmFPCN_3pc <- lm(roi_EmoNeg ~ pc1_wellwritten + pc2_accessible + pc3_interesting + (1|Story)
+ (1|fMRI_subj), data = ROI_analysis)
lmIFG_3pc <- lmer(roi_LitPos_IFG ~ pc1_wellwritten + pc2_accessible + pc3_interesting + (1|Story)
+ (1|fMRI_subj), data = ROI_analysis)
summary(lmIFG_3pc)
lmFPCN_3pc <- lmer(roi_EmoNeg ~ pc1_wellwritten + pc2_accessible + pc3_interesting + (1|Story)
+ (1|fMRI_subj), data = ROI_analysis)
summary(lmFPCN_3pc)
lmIPL_3pc <- lmer(roi_LitPos_IPL ~ pc1_wellwritten + pc2_accessible + pc3_interesting + (1|Story)
+ (1|fMRI_subj), data = ROI_analysis)
summary(lmIPL_3pc)
lmPrecu_3pc <- lmer(roi_LitPos_Precu ~ pc1_wellwritten + pc2_accessible + pc3_interesting + (1|Story)
+ (1|fMRI_subj), data = ROI_analysis)
summary(lmPrecu_3pc)
lmSTG_3pc <- lmer(roi_LitNeg ~ pc1_wellwritten + pc2_accessible + pc3_interesting + (1|Story)
+ (1|fMRI_subj), data = ROI_analysis)
summary(lmSTG_3pc)
load("~/Documents/GitHub/RStudio/Thesis_Workspace.RData")
View(lit2VwTiming)
knitr::opts_chunk$set(echo = TRUE)
#Visualize ratings against time----
library(ggplot2)
emoDHOFinal <- transform(emoDHOFinal, Onset = as.numeric(Onset), Duration = as.numeric(Duration))
emoDMOFinal <- transform(emoDMOFinal, Onset = as.numeric(Onset), Duration = as.numeric(Duration))
litDHOFinal <- transform(litDHOFinal, Onset = as.numeric(Onset), Duration = as.numeric(Duration))
litDMOFinal <- transform(litDMOFinal, Onset = as.numeric(Onset), Duration = as.numeric(Duration))
dotWithErrorPlotSave <- function(trend, plotTitle, shortTitle) {
limits <- aes(ymax = trend$MN + trend$SE,
ymin = trend$MN - trend$SE)
ggplot(data = trend, aes(x = Onset, y = MN, color = Onset)) +
geom_point(size=2.5, alpha=0.8, color = "orange") +
geom_errorbar(limits, width = 0.5) +
xlab("Word Onset Time (in sec)") +
ylab("Mean Rating") +
theme(text = element_text(size=15), axis.text.x=element_blank(), axis.ticks.x=element_blank()) +
ggtitle(paste(plotTitle, ", N=", ncol(trend)-6, sep=""))
ggsave(paste("~/Desktop/", shortTitle,".png", sep = ""), plot = last_plot(), device = png(),
scale = 1, width = 300, height = 200, units = c("mm"),
dpi = 300, limitsize = TRUE)
}
#EMO
dotWithErrorPlotSave(emoDHOFinal, "Emotional Arousal Rating for De Mexicaanse Hond", "emoDHtime")
dotWithErrorPlotSave(emoDMOFinal, "Emotional Arousal Rating for De Muur", "emoDMtime")
#LIT
dotWithErrorPlotSave(litDHOFinal, "Literariness Rating for De Mexicaanse Hond", "litDHtime")
dotWithErrorPlotSave(litDMOFinal, "Literariness Rating for De Muur", "litDMtime")
allRatingMarked <- read.csv(file = "thesis/AllOriginal_eventMarked.csv", header = T, sep = ",", stringsAsFactors = FALSE)
#correct for interpretation of literariness SE by changing all lit SE to 0
for (i in 1:nrow(allRatingMarked)) {
if (allRatingMarked$Rating[i] == "Literariness") {
allRatingMarked$SE[i] = 0
}
limits <- aes(ymax = allRatingMarked$MN + allRatingMarked$SE,
ymin = allRatingMarked$MN - allRatingMarked$SE)
word_plot <- ggplot(data = allRatingMarked, aes(x = Onset, y = MN, color = Rating)) +
geom_point(size=1.5) +
geom_errorbar(limits, width = 0.1, alpha = 0.2) +
xlab("Word Onset Time (in sec)") +
ylab("Mean Rating") +
theme(text = element_text(size=15),  axis.ticks.x=element_blank(), legend.position="bottom") +
facet_grid(Rating ~ Story, scales = "free_y")
event_plot <- ggplot(data = allRatingMarked, aes(x = Onset_event, y = MN_event, color = Rating)) +
geom_step(direction = "hv", size=0.5) +
xlab("Event Onset Time (in sec)") +
ylab("Mean Rating") +
theme(text = element_text(size=15),  axis.ticks.x=element_blank(), legend.position="bottom") +
facet_grid(Rating ~ Story, scales = "free_y")
ggsave("~/Desktop/allWordRating.png", plot = word_plot, device = png(),
scale = 1, width = 400, height = 240, units = c("mm"),
dpi = 300, limitsize = TRUE)
ggsave("~/Desktop/allEventRating.png", plot = event_plot, device = png(),
scale = 1, width = 400, height = 240, units = c("mm"),
dpi = 300, limitsize = TRUE)
allEmoWordRating <- unlist(subset(allRatingMarked, Rating == "Emotional Arousal", select = "MN"))
allLitWordRating <- unlist(subset(allRatingMarked, Rating == "Literariness", select = "MN"))
allEmoEventRating <- unlist(subset(allRatingMarked, Rating == "Emotional Arousal", select = "MN_event"))
allLitEventRating <- unlist(subset(allRatingMarked, Rating == "Literariness", select = "MN_event"))
#word.model <- lm(allEmoWordRating ~ allLitWordRating)
#event.model <- lm(allEmoEventRating ~ allLitEventRating)
#anova(word.model)
#anova(event.model)
cor.test(allEmoWordRating, allLitWordRating, method = "pearson")
cor.test(allEmoEventRating, allLitEventRating, method = "pearson")
knitr::opts_chunk$set(echo = TRUE)
library(tidyr)
#Simple linear regression ANOVA of Emo on Lit ratings, with and without boxcar smoothing
library('zoo')
emoDHTrend <- cbind(emoDHTrend, rollmean(emoDHTrend$mean, k = 5, fill = NA, align = "center"))
names(emoDHTrend)[14] <- "rollmean"
litDHTrend <- cbind(litDHTrend, rollmean(litDHTrend$mean, k = 5, fill = NA, align = "center"))
names(litDHTrend)[14] <- "rollmean"
#emo_lit_DHmodel <- lm(emoDHTrend$mean ~ litDHTrend$mean)
#emo_lit_DHboxedmodel <- lm(emoDHTrend$rollmean ~ litDHTrend$rollmean)
#anova(emo_lit_DHmodel)
#anova(emo_lit_DHboxedmodel)
cor.test(emoDHTrend$mean, litDHTrend$mean, method = "pearson")
emoDMTrend <- cbind(emoDMTrend, rollmean(emoDMTrend$mean, k = 5, fill = NA, align = "center"))
names(emoDMTrend)[14] <- "rollmean"
litDMTrend <- cbind(litDMTrend, rollmean(litDMTrend$mean, k = 5, fill = NA, align = "center"))
names(litDMTrend)[14] <- "rollmean"
#emo_lit_DMmodel <- lm(emoDMTrend$mean ~ litDMTrend$mean)
#emo_lit_DMboxedmodel <- lm(emoDMTrend$rollmean ~ litDMTrend$rollmean)
#anova(emo_lit_DMmodel)
#anova(emo_lit_DMboxedmodel)
cor.test(emoDMTrend$mean, litDMTrend$mean, method = "pearson")
#Simple linear regression ANOVA of Emo on Lit ratings, with and without boxcar smoothing
library('zoo')
emoDHTrend <- cbind(emoDHTrend, rollmean(emoDHTrend$mean, k = 5, fill = NA, align = "center"))
names(emoDHTrend)[14] <- "rollmean"
litDHTrend <- cbind(litDHTrend, rollmean(litDHTrend$mean, k = 5, fill = NA, align = "center"))
names(litDHTrend)[14] <- "rollmean"
emo_lit_DHmodel <- lm(emoDHTrend$mean ~ litDHTrend$mean)
#emo_lit_DHboxedmodel <- lm(emoDHTrend$rollmean ~ litDHTrend$rollmean)
anova(emo_lit_DHmodel)
#anova(emo_lit_DHboxedmodel)
cor.test(emoDHTrend$mean, litDHTrend$mean, method = "pearson")
emoDMTrend <- cbind(emoDMTrend, rollmean(emoDMTrend$mean, k = 5, fill = NA, align = "center"))
names(emoDMTrend)[14] <- "rollmean"
litDMTrend <- cbind(litDMTrend, rollmean(litDMTrend$mean, k = 5, fill = NA, align = "center"))
names(litDMTrend)[14] <- "rollmean"
#emo_lit_DMmodel <- lm(emoDMTrend$mean ~ litDMTrend$mean)
#emo_lit_DMboxedmodel <- lm(emoDMTrend$rollmean ~ litDMTrend$rollmean)
#anova(emo_lit_DMmodel)
#anova(emo_lit_DMboxedmodel)
cor.test(emoDMTrend$mean, litDMTrend$mean, method = "pearson")
#Simple linear regression ANOVA of Emo on Lit ratings, with and without boxcar smoothing
library('zoo')
emoDHTrend <- cbind(emoDHTrend, rollmean(emoDHTrend$mean, k = 5, fill = NA, align = "center"))
names(emoDHTrend)[14] <- "rollmean"
litDHTrend <- cbind(litDHTrend, rollmean(litDHTrend$mean, k = 5, fill = NA, align = "center"))
names(litDHTrend)[14] <- "rollmean"
emo_lit_DHmodel <- lm(emoDHTrend$mean ~ litDHTrend$mean)
#emo_lit_DHboxedmodel <- lm(emoDHTrend$rollmean ~ litDHTrend$rollmean)
anova(emo_lit_DHmodel)
#anova(emo_lit_DHboxedmodel)
cor.test(emoDHTrend$mean, litDHTrend$mean, method = "pearson")
cor.test(emoDHTrend$rollmean, litDHTrend$rollmean, method = "pearson")
emoDMTrend <- cbind(emoDMTrend, rollmean(emoDMTrend$mean, k = 5, fill = NA, align = "center"))
names(emoDMTrend)[14] <- "rollmean"
litDMTrend <- cbind(litDMTrend, rollmean(litDMTrend$mean, k = 5, fill = NA, align = "center"))
names(litDMTrend)[14] <- "rollmean"
#emo_lit_DMmodel <- lm(emoDMTrend$mean ~ litDMTrend$mean)
#emo_lit_DMboxedmodel <- lm(emoDMTrend$rollmean ~ litDMTrend$rollmean)
#anova(emo_lit_DMmodel)
#anova(emo_lit_DMboxedmodel)
cor.test(emoDMTrend$mean, litDMTrend$mean, method = "pearson")
#Simple linear regression ANOVA of Emo on Lit ratings, with and without boxcar smoothing
library('zoo')
emoDHTrend <- cbind(emoDHTrend, rollmean(emoDHTrend$mean, k = 5, fill = NA, align = "center"))
names(emoDHTrend)[14] <- "rollmean"
litDHTrend <- cbind(litDHTrend, rollmean(litDHTrend$mean, k = 5, fill = NA, align = "center"))
names(litDHTrend)[14] <- "rollmean"
cor.test(emoDHTrend$mean, litDHTrend$mean, method = "pearson")
cor.test(emoDHTrend$rollmean, litDHTrend$rollmean, method = "pearson")
emoDMTrend <- cbind(emoDMTrend, rollmean(emoDMTrend$mean, k = 5, fill = NA, align = "center"))
names(emoDMTrend)[14] <- "rollmean"
litDMTrend <- cbind(litDMTrend, rollmean(litDMTrend$mean, k = 5, fill = NA, align = "center"))
names(litDMTrend)[14] <- "rollmean"
cor.test(emoDMTrend$mean, litDMTrend$mean, method = "pearson")
cor.test(emoDMTrend$rollmean, litDMTrend$rollmean, method = "pearson")
pwd
rater <- read.delim("~/Documents/GitHub/RStudio/thesis/Behavioral/rater_group_behavioral.csv", header = TRUE, sep = ",", stringsAsFactors = TRUE)
fmri <- read.delim("~/Documents/GitHub/RStudio/thesis/Behavioral/fMRI_group_behavioral.csv", header = TRUE, sep = ",", stringsAsFactors = TRUE)
ttestResults <- data.frame()
for (i in 3:58) {
if ((i==11) | (i==13) | (i==22) | (i==24) | (i==40) | (i==56)) {
next()
}
else {
result.temp <- t.test(rater[,i], fmri[,i], vvar.equal = TRUE)
ttestResults[i-2, 1:3] <- c(result.temp$statistic[["t"]], result.temp$parameter[["df"]], result.temp$p.value)
}
View(result.temp)
library(ggplot2)
library(plotly)
plot(emoDHOFinal$Onset, emoDHOFinal$MN)
p <- ggplot(litDHOFinal, aes(x = Onset, y = MN)) +
geom_point() #+
geom_errorbar(emoDHOFinal, mapping=aes(x = Onset, ymin = MN-SE, ymax=MN+SE)
ggplotly(p)
library(ggplot2)
library(plotly)
plot(emoDHOFinal$Onset, emoDHOFinal$MN)
p <- ggplot(litDHOFinal, aes(x = Onset, y = MN)) +
geom_point() #+
geom_errorbar(emoDHOFinal, mapping=aes(x = Onset, ymin = MN-SE, ymax=MN+SE))
ggplotly(p)
dotWithErrorPlotSave <- function(finalData) {
dodge <- position_dodge(width = 0.9)
limits <- aes(ymax = finalData$MN + finalData$SE,
ymin = finalData$MN - finalData$SE)
p <- ggplot(data = finalData, aes(x = Onset, y = MN, color = "blue")) +
geom_point(size=2.5, alpha=0.6, color = "orange") +
geom_errorbar(limits, width = 0.25) +
theme(axis.text.x=element_blank(), axis.ticks.x=element_blank(),
axis.title.x=element_blank()) +
ggtitle(paste("emoDH", ", N=", ncol(finalData)-6, sep=""))
# ggsave(paste("~/Desktop/", shortTitle,".png", sep = ""), plot = last_plot(), device = png(),
#    scale = 1, width = 300, height = 200, units = c("mm"),
#   dpi = 300, limitsize = TRUE)
return(p)
}
dotWithErrorPlotSave(emoDHOFinal)
p <- ggplot(litDHOFinal, aes(x = Onset, y = MN)) +
geom_point() #+
geom_errorbar(emoDHOFinal, mapping=aes(x = Onset, ymin = MN-SE, ymax=MN+SE))
ggplotly(p)
plot(emoDHOFinal$Onset, emoDHOFinal$MN)
p <- ggplot(litDHOFinal, aes(x = Onset, y = MN)) +
geom_point() +
geom_errorbar(emoDHOFinal, mapping=aes(x = Onset, ymin = MN-SE, ymax=MN+SE))
ggplotly(p)
new.env()
p
View(litDHOFinal)
library(ggplot2)
library(plotly)
p <- ggplot(litDHOFinal, aes(x = Onset, y = MN)) +
geom_point() +
geom_text(mapping = NULL,data = NULL, stat = "word", position = "word",
parse = FALSE, nudge_x = 0, nudge_y = 0, check_overlap = FALSE,
na.rm = FALSE, show.legend = NA, inherit.aes = TRUE)
library(ggplot2)
library(plotly)
p <- ggplot(litDHOFinal, aes(x = Onset, y = MN)) +
geom_point() +
geom_text(mapping = NULL, data = NULL, stat = "word", position = "word",
parse = FALSE, nudge_x = 0, nudge_y = 0, check_overlap = FALSE,
na.rm = FALSE, show.legend = NA, inherit.aes = TRUE))
library(ggplot2)
library(plotly)
p <- ggplot(litDHOFinal, aes(x = Onset, y = MN)) +
geom_point() +
##  geom_text(mapping = NULL, data = NULL, stat = "word", position = "word",
parse = FALSE, nudge_x = 0, nudge_y = 0, check_overlap = FALSE,
library(ggplot2)
library(plotly)
p <- ggplot(litDHOFinal, aes(x = Onset, y = MN)) +
geom_point() #+
##  geom_text(mapping = NULL, data = NULL, stat = "word", position = "word",
parse = FALSE, nudge_x = 0, nudge_y = 0, check_overlap = FALSE,
library(ggplot2)
library(plotly)
p <- ggplot(litDHOFinal, aes(x = Onset, y = MN)) +
geom_point() #+
##  geom_text(mapping = NULL, data = NULL, stat = "word", position = "word",
#   parse = FALSE, nudge_x = 0, nudge_y = 0, check_overlap = FALSE,
#  na.rm = FALSE, show.legend = NA, inherit.aes = TRUE)
ggplotly(p)
library(ggplot2)
library(plotly)
p <- ggplot(litDHOFinal, aes(x = Onset, y = MN)) +
geom_point() #+
##  geom_text(mapping = NULL, data = NULL, stat = "word", position = "word",
#   parse = FALSE, nudge_x = 0, nudge_y = 0, check_overlap = FALSE,
#  na.rm = FALSE, show.legend = NA, inherit.aes = TRUE)
ggplotly(p)
library(ggplot2)
library(plotly)
p <- ggplot(litDHOFinal, aes(x = Onset, y = MN)) +
geom_errorbar(emoDHOFinal, mapping=aes(x = Onset, ymin = MN-SE, ymax=MN+SE))
ggplotly(p)
library(ggplot2)
library(plotly)
p <- ggplot(litDHOFinal, aes(x = Onset, y = MN)) +
geom_errorbar(emoDHOFinal, mapping=aes(x = Onset, ymin = MN-SE, ymax=MN+SE))
ggplotly(p)
